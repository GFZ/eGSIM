# Flatfile fields (excluding IMTs), i.e. the columns of any tabular data structure
# (e.g., Django Model, pandas DataFrame, PyTables Table) representing a Flatfile.
# Each field name is mapped to a sub-dictionary of its (optional) properties:
#
# <field_name>:
#   type:    The field type (default: float): float, int, str, datetime64[ns], bool.
#            (we use numpy/pandas dtypes but applications might use type aliases, as long
#            as they are serializable. E.g. pandas 'string', 'boolean', 'Int*' are not)
#   bounds:  The bounds [min, max] (default [null, null], where null means: don't check).
#            Applications should accept values only within the specified bound
#   default: The default value when nothing is provided. Applications needs to treat
#            the case where no default is given depending on the field type and storage:
#            In RDBMS, NULL is valid for all types, whereas in pandas the default is
#            type dependent (NaN, '', pandas.NaT, 0, false) and can not always be used
#            unambiguously to denote a missing value (e.g., 0 for `int` and false for `bool`)
#   help:    The field description (default: '')
#   choices: Sub-dict of possible `(value, string_label)` pairs (default: {}).
#            Applications should accept values only within the specified `choices` values
#
# Note that empty fields, e.g. "magnitude:" equals as "magnitude: null" in this syntax (YAML)
# and should be mapped in applications to a dict of all defaults above. Also, strings don't
# need to be quoted unless containing characters that could be mistaken with YAML syntax

FLATIFLE_FIELDS:
  event_name:
    type: str
  event_country:
    type: str
  event_time:
    type: datetime64[ns]
  event_latitude:
    help: event latitude (deg)
    bounds: [-90, 90]
  event_longitude:
    help: event longitude (deg)
    bounds: [-180, 180]
  hypocenter_depth:
    help: Hypocentral depth (in Km?)
  magnitude:
  magnitude_type:
    typer: str
  magnitude_uncertainty:
  tectonic_environment:
    type: str
  strike_1:
  strike_2:
  dip_1:
  dip_2:
  rake_1:
  rake_2:
  style_of_faulting:
    type: str
    choices:  # Mechanism type to Rake conversion:
      Normal: -90.0
      Strike-Slip: 0.0
      Reverse: 90.0
      Oblique: 0.0
      Unknown: 0.0
      N: -90.0  # Flatfile conventions
      S: 0.0
      R: 90.0
      U: 0.0
      NF: -90.  # ESM flatfile conventions
      SS: 0.
      TF: 90.
      NS: -45.  # Normal with strike-slip component
      TS: 45.  # Reverse with strike-slip component
      O: 0.0
  depth_top_of_rupture:
    help: Top of Rupture Depth (km)
  rupture_length:
  rupture_width:
  station_name:
    type: str
  station_country:
    type: str
  station_latitude:
    help: station latitude (deg)
    bounds: [-90, 90]
  station_longitude:
    help: station longitude (deg)
    bounds: [-180, 180]
  station_elevation:
    help: station elevation (Km?)
  vs30:
    help: Average shear wave velocity in the top 30 m, in m/s
  vs30_measured:
    help: whether or not the Vs30 is measured (default true)
    type: bool
    default: true
  vs30_sigma:
  depth_to_basement:
  z1:
    help: depth of the layer where seismic waves start to propagate with a speed above 1.0 km/sec, in meters
  z2pt5:
    help: depth of the layer where seismic waves start to propagate with a speed above 2.5 km/sec, in km
  repi:
    help: epicentral distance (in Km?)
  rrup:
    help: rupture_distance (in Km?)
  rjb:
    help: Joyner-Boore distance (in Km?)
  rhypo:
    help: hypocentral distance (in Km?)
  rx:
  ry0:
  azimuth:
  digital_recording:
    type: bool
    default: true
  type_of_filter:
    type: str
  npass:
    type: int
  nroll:
  hp_h1:
  hp_h2:
  lp_h1:
  lp_h2:
  factor:
  lowest_usable_frequency_h1:
  lowest_usable_frequency_h2:
  lowest_usable_frequency_avg:
  highest_usable_frequency_h1:
  highest_usable_frequency_h2:
  highest_usable_frequency_avg:
  backarc:
    type: bool
    default: false


# GSIM required parameters (Gsim attributes REQUIRES_SITES_PARAMETERS,
# REQUIRES_RUPTURE_PARAMETERS and REQUIRES_DISTANCES) found in all OpenQuake GSIMs.
# Map a parameter to a corresponding flatfile column ONLY if you want GSIMs requiring
# the parameter to ignore flatfile records with missing values (under the column).
# This is beneficial to avoid computational errors but consider that a mapping
# might be useless (e.g. when the column type doesn't support a distinctive missing
# value such as `int` and `bool` columns in pandas) or dangerous (e.g., when missing
# data should not be removed because filled with defaults later in the code. See smtk
# and eGSIM source code for details, in particular for distances). In case of doubts,
# or if no matching column exists, map the parameter to null (or nothing).
# When running eGSIM admin command such as `egsim_init` (which should be done after
# each package update or upgrade) the mapping below will be stored in the DB for later
# usage, and any new <P> will issue a warning that can be fixed by adding <P> in the
# lists below (with or without the corresponding flatfile column)

REQUIRES_DISTANCES:
  azimuth: azimuth
  rcdpp: # not used in flatfiles
  repi: repi
  rhypo: rhypo
  rjb: rjb
  rrup: rrup
  rvolc: # not used in flatfiles
  rx: rx
  ry0: ry0

REQUIRES_RUPTURE_PARAMETERS:
  dip: # no 1-1-mapping in flatfiles
  hypo_depth: hypocenter_depth
  mag: magnitude
  rake: # no 1-1-mapping in flatfiles
  # strike: # no 1-1-mapping in flatfiles
  width: # rupture_width in flatfiles, but missing values are handled in the code
  ztor: depth_top_of_rupture

REQUIRES_SITES_PARAMETERS:
  backarc: # backarc in flatfiles (this is a boolean field)
  backarc_distance: # should be xvf: https://github.com/gem/oq-engine/issues/6135
  ec8:
  ec8_p18:
  geology: # str? (default UNKNOWN) should be added as a configurable parameter but should default to "UNKNOWN"
  h800:
  lat: event_latitude
  lon: event_longitude
  siteclass: # not used in flatfiles
  slope: # float (default 0.1 m/m) affects 2 models relevant ones for Europe. This should be added as a configurable property, defaulting to 0.1 m/m
  vs30: vs30
  vs30measured: # vs30_measured in flatfiles (this is a boolean field)
  xvf: # float (default 0)
  z1pt0: z1
  z1pt4: # used by models using a different basin depth definition from the global standards. Honestly, I can't identify a default, but from a "geophysical" perspective I would suggest to take it as equivalent to z1pt0. Perhaps this can be configured by the user but default to z1pt0 if not set.
  z2pt5: z2pt5
# This YAML file contains the flatfile metadata that will be used in this package.
# Metadata is provided based on columns, where a Flatfile column or Field is represented
# here as YAML Mapping with the following optional properties:
#
# <column_name>:
#   dtype:    The data type (default when missing: null). Supported values are: null,
#             int, float, str, datetime (ISO formatted), bool, or the list of the
#             possible values of the column data (which must be all the same dtype).
#             null or missing means "not specified" and is used to skip data type check.
#             Data that has missing values (e.g. '', null, NaN) will be filled with the
#             default (see below), data that is not parsable to the given type (e.g. 'x'
#             for float) will raise Exceptions
#   default:  The default value to replace missing data (e.g. '', null, NaN). When a
#             default missing, it will be `dtype` dependent: NaN (for
#             dtype float), NaT (datetime), None/null (str or categorical), 0 (int),
#             False (bool). As such, please note that int and bool do not actually
#             support missing data, as 0 and False also denote valid values for the dtype
#   help:     The field help or description. Depending on the application, a default
#             might be provided (e.g. "")
#   alias:    The column name used in OpenQuake. If missing, it defaults to <column_name>
#   type:     The column type. Supported values are: i (intensity measure), d
#             (distance measure), r (rupture parameter), s (site parameter).
#             When missing, defaults to 'u' (unknown)
#   required: Tells if the column should be always present in flatfiles (default when
#             missing: false)
#   bounds:   A quoted string with comma-separated conditions defining the column bounds,
#             e.g.: ">0", ">=0,<5.5", ">2006-01-01T00:12:23". Bounds are currently not
#             used to reject data (they might be in future releases)

# YAML notes:
# Date-times can be given as ISO formatted text, without quotes. Unless required,
# strings don't need quotes either, but can be used for readability. YAML is a
# superset of JSON, so you can type lists as JSON Arrays: [...] and Mappings as JSON
# Objects: {...}. If you want to type over multiple lines for readability, prefix the
# text with >- (see examples here below or https://stackoverflow.com/a/3790497)

azimuth:
  dtype: float
  type: d
repi:
  dtype: float
  help: epicentral distance (in km)
  type: d
rrup:
  dtype: float
  help: >-
    rupture_distance (in km). Missing data (empty or NaN values, column not provided) 
    will be replaced with the hypocentral distance, if the column "rhypo" 
    is provided
  type: d
rjb:
  dtype: float
  help: >-
    Joyner-Boore distance (in km). Missing data (empty or NaN values, column not provided)  
    will be replaced with the epicentral distance, if the column "repi" is provided
  type: d
rhypo:
  dtype: float
  help: hypocentral distance (in km)
  type: d
rx:
  dtype: float
  help: >-
    Horizontal distance (in km) from the top of the rupture measured perpendicular to 
    strike. Missing data (empty or NaN values, column not provided) will be replaced 
    with the epicentral distance, if the column "repi" is provided
  type: d
ry0:
  dtype: float
  help: >-
    Horizontal distance (in km) from the top of the rupture measured parallel to strike. 
    Missing data (empty or NaN values, column not provided) will be replaced with the 
    epicentral distance, if the column "repi" is provided
  type: d
rvolc:
  dtype: float
  default: 0
  help: Distance through volcanic zone (km). When missing, it defaults to 0
  type: d
event_latitude:
  dtype: float
  bounds: ">=-90, <=90"
  help: Hypocentre latitude (deg)
  alias: hypo_lat
  type: r
event_longitude:
  dtype: float
  bounds: ">=-180, <=180"
  help: Hypocentre longitude (deg)
  alias: hypo_lon
  type: r
magnitude:
  dtype: float
  alias: mag
  type: r
  required: true
event_depth:
  dtype: float
  help: Hypocentral depth (km)
  alias: hypo_depth
  type: r
depth_top_of_rupture:
  dtype: float
  bounds: ">=0"
  help: Top of Rupture Depth (km)
  alias: ztor
  type: r
rupture_width:
  dtype: float
  bounds: ">=0"
  help: >-
    Down-dip width of the rupture (km). Missing data (empty or NaN values, column not 
    provided) will be derived from the record magnitude using a Magnitude-Scaling 
    Relationship defined for PEER PSHA test cases, and assuming an aspect ratio of 1
  alias: width
  type: r
dip:
  dtype: float
  bounds: ">=0, <=90"
  help: >-
    the angle of the fault relative to the horizontal (deg).
    Hint: in case of more components available (e.g. from web services), the
    correct one should be inferred by the user from the rupture, or can be chosen
    randomly if no information is available
  type: r
rake:
  dtype: float
  bounds: ">=-180, <=180"
  help: >-
    the direction the hanging wall moves, relative to the fault strike (deg).
    Hint: in case of more components available (e.g. from
    web services), the correct one should be inferred by the user from the rupture,
    or can be chosen randomly if no information is available
  type: r
z1pt0:
  dtype: float
  help: >-
    depth of the layer where seismic waves start to propagate with a speed above 1.0 
    km/sec, in meters. Missing data (empty or NaN values, column not provided) will be 
    derived from the record vs30 using the Chiou & Youngs (2014) California model, if 
    the flatfile column "vs30" is provided
  type: s
z2pt5:
  dtype: float
  help: >-
    depth of the layer where seismic waves start to propagate with a speed above 
    2.5 km/sec, in km. Missing data (empty or NaN values, column not provided) will be 
    derived from the record vs30 using the Campbell & Bozorgnia (2014) model, if the 
    flatfile column "vs30" is provided
  type: s
vs30:
  dtype: float
  bounds: ">=0"
  help: Average shear wave velocity in the top 30 m, in m/s
  type: s
backarc:
  dtype: bool
  default: false
  type: s
  help: >-
    boolean indicating if the site is in the subduction backarc. When missing or false, 
    the site is assumed to be unknown or in the subduction forearc
station_latitude:
  dtype: float
  bounds: ">=-90, <=90"
  help: station latitude (deg)
  alias: lat
  type: s
station_longitude:
  dtype: float
  bounds: ">=-180, <=180"
  help: station longitude (deg)
  alias: lon
  type: s
vs30measured:
  dtype: bool
  default: true
  help: whether or not the Vs30 is measured (default true)
  type: s
xvf:
  dtype: float
  help: distance to the volcanic front (km)
  type: s
fpeak:
  dtype: float
  bounds: ">=0"
  help: >-
    Frequency that corresponds to the peak of the horizontal to vertical
    spectral ratio (Hz)
  type: s
region:
  dtype: int
  bounds: ">=0, <=5"
  default: 0
  help: The ESHM2020 cluster region to which the site belongs
  type: s
geology:
  dtype: ["CENOZOIC", "HOLOCENE", "JURASSIC-TRIASSIC", "CRETACEOUS", "PALEOZOIC", "PLEISTOCENE", "PRECAMBRIAN", "UNKNOWN"]
  default: UNKNOWN
  help: geological classification of the site
  type: s
slope:
  dtype: float
  bounds: ">0"
  help: The local slope of the station
  type: s
PGA:
  dtype: float
  help: Peak ground acceleration, in g
  type: i
PGV:
  dtype: float
  help: Peak ground velocity, in cm/s
  type: i
SA:
  dtype: float
  help: >-
    Spectral Acceleration, in g. SA columns are in the form "SA(P)",
    where P denotes the period at which it has been computed, in s
  type: i
PGD:
  dtype: float
  help: Peak ground displacement during an earthquake measured, in cm
  type: i
CAV:
  dtype: float
  help: Cumulative Absolute Velocity, in g-sec
  type: i
IA:
  dtype: float
  help: Arias intensity, in m/s
  type: i
# ID columns:
event_id:
  # required: true
  help: >-
    The unique ID of the recorded seismic event. If missing, an id is inferred
    from the columns event_latitude, event_longitude, event_depth and event_time 
    (ISO date time), which must all be present.
    In general, you can use the id provided by the event catalog or web service,
    or create your own, as long as it holds: same id <=> same event. IDs should
    be preferably of type integer for performance reasons
station_id:
  # required: true
  help: >-
    The unique ID of the seismic station. If missing, an id is inferred
    from the columns station_latitude, station_longitude, which must all be present.
    In general, you can infer the id via the tuple (network_code, station_code)
    or create your own, as long as it holds: same id <=> same station. IDs should
    be preferably of type integer for performance reasons
event_time:
  dtype: datetime
  help: >-
    the event time as ISO formatted string


# FIXME: REMOVE:

# Here the collection of the parameters required by all OpenQuake models, mapped to their
# corresponding flatfile column. With this information programs can tell, for any given
# flatfile, which Ground motion models can be used with it. **As such, a parameter with
# no mapping (or mapped to null) will programmatically discard all models requiring it**.

#openquake_models_parameters:
#  distance_measure:  # OpenQuake model attribute: REQUIRES_DISTANCES
#    azimuth: azimuth
#    repi: repi
#    rrup: rrup
#    rjb: rjb
#    rhypo: rhypo
#    rx: rx
#    ry0: ry0
#    rvolc: rvolc
#    rcdpp:
#  rupture_parameter:  # OpenQuake model attribute: REQUIRES_RUPTURE_PARAMETERS
#    hypo_lat: event_latitude
#    hypo_lon: event_longitude
#    hypo_depth: event_depth
#    mag: magnitude
#    ztor: depth_top_of_rupture
#    width: rupture_width
#    dip: dip
#    rake: rake
#    in_cshm:
#  site_parameter:  # OpenQuake model attribute: REQUIRES_SITES_PARAMETERS
#    z1pt0: z1
#    z2pt5: z2pt5
#    vs30: vs30
#    backarc: backarc
#    lat: station_latitude
#    lon: station_longitude
#    vs30measured: vs30measured
#    xvf: xvf
#    fpeak: fpeak
#    region: region
#    geology: geology
#    slope: slope
#    f0:
#    z1pt4:
#    ec8_p18:
#    bas:
#    siteclass:
#    h800:
#    ec8:
#    soiltype:
#    THV:
#    PHV:
#    T_15:
#    F_15:
#    D50_15:
#    freeface_ratio:
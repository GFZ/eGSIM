# This YAML file contains the flatfile columns metadata for checking flatfiles.
# Important columns that will be processed are: 1. parameter columns (in this case a
# mapping with an OpenQuake model parameters is required, see down the page),
# 2. Intensity Measure columns (e.g. PGA) or 3. mandatory columns (e.g. event_id).
# Any other type of column is always allowed for reference but might not be used in
# applications. To add a Flatfile column, use the format:
#
# <column_name>:
#   required: Tells if the column should be always present in flatfiles (default when
#            missing: false). Applications should reject flatfiles not containing all
#            required columns
#   dtype:   The data type (default when missing: null). Supported values are: null, int,
#            float, str, datetime (ISO formatted), bool, or the list of the possible
#            values of the column data (see pandas categorical data). null means
#            "not specified" and should be used by applications to skip data checks.
#            Data not conforming to the assigned dtype might be coerced or rejected,
#            depending on the application
#   bounds:  The bounds [min, max], endpoints included. Default when missing:
#            [null, null], where null means: unbounded / don't check. Out-of-bound data
#            might be rejected or coerced to their default, depending on the application
#   default: The default value that applications should set when nothing is provided.
#            When missing, the default value depends on `dtype` and the storage used
#            (e.g. pandas vs sql). E.g., with pandas: NaN (for dtype float),
#            NaT (datetime), None/null
#            (str or categorical), 0 (int), False (bool).
#   help:    The field help or description (defaults to "" when missing)

# YAML notes:
# Date-times can be given as ISO formatted text, without quotes. Unless required,
# strings don't need quotes either, but can be used for readability. YAML is a
# superset of JSON, so you can type lists as JSON Arrays: [...] and Mappings as JSON
# Objects: {...}. If you want to type over multiple lines for readability, prefix the
# text with >- (see examples here below or https://stackoverflow.com/a/3790497)

azimuth:
  dtype: float
repi:
  dtype: float
  help: epicentral distance (in km)
rrup:
  dtype: float
  help: rupture_distance (in km)
rjb:
  dtype: float
  help: Joyner-Boore distance (in km)
rhypo:
  dtype: float
  help: hypocentral distance (in km)
rx:
  dtype: float
  help: >-
    Horizontal distance (in km) from the top of the rupture measured
    perpendicular to strike
ry0:
  dtype: float
  help: >-
    Horizontal distance (in km) from the top of the rupture measured parallel
    to strike
rvolc:
  dtype: float
  default: 0
  help: Distance through volcanic zone (km)
event_latitude:
  dtype: float
  bounds: [ -90, 90 ]
  help: Hypocentre latitude (deg)
event_longitude:
  dtype: float
  bounds: [ -180, 180 ]
  help: Hypocentre longitude (deg)
magnitude:
  dtype: float
event_depth:
  dtype: float
  help: Hypocentral depth (km)
depth_top_of_rupture:
  dtype: float
  bounds: [ 0, null ]
  help: Top of Rupture Depth (km)
rupture_width:
  dtype: float
  bounds: [ 0, null ]
  help: Down-dip width of the rupture (km)
dip:
  dtype: float
  bounds: [ 0, 90 ]
  help: >-
    the angle of the fault relative to the horizontal (deg).
    Hint: in case of more components available (e.g. from web services), the
    correct one should be inferred by the user from the rupture, or can be chosen
    randomly if no information is available
rake:
  dtype: float
  bounds: [ -180, 180 ]
  help: >-
    the direction the hanging wall moves, relative to the fault strike (deg).
    Hint: in case of more components available (e.g. from
    web services), the correct one should be inferred by the user from the rupture,
    or can be chosen randomly if no information is available
z1:
  dtype: float
  help: >-
    depth of the layer where seismic waves start to propagate with a
    speed above 1.0 km/sec, in meters
z2pt5:
  dtype: float
  help: >-
    depth of the layer where seismic waves start to propagate with a speed
    above 2.5 km/sec, in km
vs30:
  dtype: float
  bounds: [ 0, null ]
  help: Average shear wave velocity in the top 30 m, in m/s
backarc:
  dtype: bool
  default: false
station_latitude:
  dtype: float
  bounds: [ -90, 90 ]
  help: station latitude (deg)
station_longitude:
  dtype: float
  bounds: [ -180, 180 ]
  help: station longitude (deg)
vs30measured:
  dtype: bool
  default: true
  help: whether or not the Vs30 is measured (default true)
xvf:
  dtype: float
  help: distance to the volcanic front (km)
fpeak:
  dtype: float
  bounds: [ 0, null ]
  help: >-
    Frequency that corresponds to the peak of the horizontal to vertical
    spectral ratio (Hz)
region:
  dtype: int
  bounds: [ 0, 5 ]
  default: 0
  help: The ESHM2020 cluster region to which the site belongs
geology:
  dtype: ["CENOZOIC", "HOLOCENE", "JURASSIC-TRIASSIC", "CRETACEOUS", "PALEOZOIC", "PLEISTOCENE", "PRECAMBRIAN", "UNKNOWN"]
  default: UNKNOWN
  help: geological classification of the site
slope:
  dtype: float
  bounds: [ 1.0e-100, null ]  # 1.0e-100 is a workaround to tell: >0
  help: The local slope of the station
# IMT columns:
PGA:
  dtype: float
  help: Peak ground acceleration, in g
PGV:
  dtype: float
  help: Peak ground velocity, in cm/s
SA:
  dtype: float
  help: >-
    Spectral Acceleration, in g. SA columns are in the form "SA(P)",
    where P denotes the period at which it has been computed, in s
PGD:
  dtype: float
  help: Peak ground displacement during an earthquake measured, in cm
CAV:
  dtype: float
  help: Cumulative Absolute Velocity, in g-sec
IA:
  dtype: float
  help: Arias intensity, in m/s
# ID columns:
event_id:
  required: true
  help: >-
    The unique ID of the recorded seismic event.
    You can use the id provided by the event catalog or web service,
    or create your own, as long as it holds: same id <=> same event. IDs should
    be preferably of type integer for performance reasons
station_id:
  required: true
  help: >-
    The unique ID of the seismic station.
    You can infer the id via the tuple (network_code, station_code)
    or create your own, as long as it holds: same id <=> same station. IDs should
    be preferably of type integer for performance reasons

# Here the collection of the parameters required by all OpenQuake models, mapped to their
# corresponding flatfile column. With this information programs can tell, for any given
# flatfile, which Ground motion models can be used with it. **As such, a parameter with
# no mapping (or mapped to null) will programmatically discard all models requiring it**.

openquake_models_parameters:
  distance_measure:  # OpenQuake model attribute: REQUIRES_DISTANCES
    azimuth: azimuth
    repi: repi
    rrup: rrup
    rjb: rjb
    rhypo: rhypo
    rx: rx
    ry0: ry0
    rvolc: rvolc
    rcdpp:
  rupture_parameter:  # OpenQuake model attribute: REQUIRES_RUPTURE_PARAMETERS
    hypo_lat: event_latitude
    hypo_lon: event_longitude
    hypo_depth: event_depth
    mag: magnitude
    ztor: depth_top_of_rupture
    width: rupture_width
    dip: dip
    rake: rake
    in_cshm:
  site_parameter:  # OpenQuake model attribute: REQUIRES_SITES_PARAMETERS
    z1pt0: z1
    z2pt5: z2pt5
    vs30: vs30
    backarc: backarc
    lat: station_latitude
    lon: station_longitude
    vs30measured: vs30measured
    xvf: xvf
    fpeak: fpeak
    region: region
    geology: geology
    slope: slope
    f0:
    z1pt4:
    ec8_p18:
    bas:
    siteclass:
    h800:
    ec8:
    soiltype:
    THV:
    PHV:
    T_15:
    F_15:
    D50_15:
    freeface_ratio: